{"remainingRequest":"/Users/rns/Documents/workplace/vscode/demo/node_modules/thread-loader/dist/cjs.js!/Users/rns/Documents/workplace/vscode/demo/node_modules/babel-loader/lib/index.js!/Users/rns/Documents/workplace/vscode/demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/rns/Documents/workplace/vscode/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rns/Documents/workplace/vscode/demo/src/views/example/components/ArticleDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rns/Documents/workplace/vscode/demo/src/views/example/components/ArticleDetail.vue","mtime":1607061023000},{"path":"/Users/rns/Documents/workplace/vscode/demo/babel.config.js","mtime":1607061023000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
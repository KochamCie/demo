{"remainingRequest":"/Users/rns/Documents/workplace/vscode/demo/node_modules/babel-loader/lib/index.js!/Users/rns/Documents/workplace/vscode/demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/rns/Documents/workplace/vscode/demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/rns/Documents/workplace/vscode/demo/src/components/UploadExcel/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/rns/Documents/workplace/vscode/demo/src/components/UploadExcel/index.vue","mtime":1607061023000},{"path":"/Users/rns/Documents/workplace/vscode/demo/babel.config.js","mtime":1607061023000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/rns/Documents/workplace/vscode/demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRlc3QuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IFhMU1ggZnJvbSAneGxzeCc7CmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogewogICAgYmVmb3JlVXBsb2FkOiBGdW5jdGlvbiwKICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgIG9uU3VjY2VzczogRnVuY3Rpb24gLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgZXhjZWxEYXRhOiB7CiAgICAgICAgaGVhZGVyOiBudWxsLAogICAgICAgIHJlc3VsdHM6IG51bGwKICAgICAgfQogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGdlbmVyYXRlRGF0YTogZnVuY3Rpb24gZ2VuZXJhdGVEYXRhKF9yZWYpIHsKICAgICAgdmFyIGhlYWRlciA9IF9yZWYuaGVhZGVyLAogICAgICAgICAgcmVzdWx0cyA9IF9yZWYucmVzdWx0czsKICAgICAgdGhpcy5leGNlbERhdGEuaGVhZGVyID0gaGVhZGVyOwogICAgICB0aGlzLmV4Y2VsRGF0YS5yZXN1bHRzID0gcmVzdWx0czsKICAgICAgdGhpcy5vblN1Y2Nlc3MgJiYgdGhpcy5vblN1Y2Nlc3ModGhpcy5leGNlbERhdGEpOwogICAgfSwKICAgIGhhbmRsZURyb3A6IGZ1bmN0aW9uIGhhbmRsZURyb3AoZSkgewogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGlmICh0aGlzLmxvYWRpbmcpIHJldHVybjsKICAgICAgdmFyIGZpbGVzID0gZS5kYXRhVHJhbnNmZXIuZmlsZXM7CgogICAgICBpZiAoZmlsZXMubGVuZ3RoICE9PSAxKSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS5lcnJvcignT25seSBzdXBwb3J0IHVwbG9hZGluZyBvbmUgZmlsZSEnKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciByYXdGaWxlID0gZmlsZXNbMF07IC8vIG9ubHkgdXNlIGZpbGVzWzBdCgogICAgICBpZiAoIXRoaXMuaXNFeGNlbChyYXdGaWxlKSkgewogICAgICAgIHRoaXMuJG1lc3NhZ2UuZXJyb3IoJ09ubHkgc3VwcG9ydHMgdXBsb2FkIC54bHN4LCAueGxzLCAuY3N2IHN1ZmZpeCBmaWxlcycpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgdGhpcy51cGxvYWQocmF3RmlsZSk7CiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgIH0sCiAgICBoYW5kbGVEcmFnb3ZlcjogZnVuY3Rpb24gaGFuZGxlRHJhZ292ZXIoZSkgewogICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnY29weSc7CiAgICB9LAogICAgaGFuZGxlVXBsb2FkOiBmdW5jdGlvbiBoYW5kbGVVcGxvYWQoKSB7CiAgICAgIHRoaXMuJHJlZnNbJ2V4Y2VsLXVwbG9hZC1pbnB1dCddLmNsaWNrKCk7CiAgICB9LAogICAgaGFuZGxlQ2xpY2s6IGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHsKICAgICAgdmFyIGZpbGVzID0gZS50YXJnZXQuZmlsZXM7CiAgICAgIHZhciByYXdGaWxlID0gZmlsZXNbMF07IC8vIG9ubHkgdXNlIGZpbGVzWzBdCgogICAgICBpZiAoIXJhd0ZpbGUpIHJldHVybjsKICAgICAgdGhpcy51cGxvYWQocmF3RmlsZSk7CiAgICB9LAogICAgdXBsb2FkOiBmdW5jdGlvbiB1cGxvYWQocmF3RmlsZSkgewogICAgICB0aGlzLiRyZWZzWydleGNlbC11cGxvYWQtaW5wdXQnXS52YWx1ZSA9IG51bGw7IC8vIGZpeCBjYW4ndCBzZWxlY3QgdGhlIHNhbWUgZXhjZWwKCiAgICAgIGlmICghdGhpcy5iZWZvcmVVcGxvYWQpIHsKICAgICAgICB0aGlzLnJlYWRlckRhdGEocmF3RmlsZSk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgYmVmb3JlID0gdGhpcy5iZWZvcmVVcGxvYWQocmF3RmlsZSk7CgogICAgICBpZiAoYmVmb3JlKSB7CiAgICAgICAgdGhpcy5yZWFkZXJEYXRhKHJhd0ZpbGUpOwogICAgICB9CiAgICB9LAogICAgcmVhZGVyRGF0YTogZnVuY3Rpb24gcmVhZGVyRGF0YShyYXdGaWxlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICAgICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHZhciBkYXRhID0gZS50YXJnZXQucmVzdWx0OwogICAgICAgICAgdmFyIHdvcmtib29rID0gWExTWC5yZWFkKGRhdGEsIHsKICAgICAgICAgICAgdHlwZTogJ2FycmF5JwogICAgICAgICAgfSk7CiAgICAgICAgICB2YXIgZmlyc3RTaGVldE5hbWUgPSB3b3JrYm9vay5TaGVldE5hbWVzWzBdOwogICAgICAgICAgdmFyIHdvcmtzaGVldCA9IHdvcmtib29rLlNoZWV0c1tmaXJzdFNoZWV0TmFtZV07CgogICAgICAgICAgdmFyIGhlYWRlciA9IF90aGlzLmdldEhlYWRlclJvdyh3b3Jrc2hlZXQpOwoKICAgICAgICAgIHZhciByZXN1bHRzID0gWExTWC51dGlscy5zaGVldF90b19qc29uKHdvcmtzaGVldCk7CgogICAgICAgICAgX3RoaXMuZ2VuZXJhdGVEYXRhKHsKICAgICAgICAgICAgaGVhZGVyOiBoZWFkZXIsCiAgICAgICAgICAgIHJlc3VsdHM6IHJlc3VsdHMKICAgICAgICAgIH0pOwoKICAgICAgICAgIF90aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICB9OwoKICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIocmF3RmlsZSk7CiAgICAgIH0pOwogICAgfSwKICAgIGdldEhlYWRlclJvdzogZnVuY3Rpb24gZ2V0SGVhZGVyUm93KHNoZWV0KSB7CiAgICAgIHZhciBoZWFkZXJzID0gW107CiAgICAgIHZhciByYW5nZSA9IFhMU1gudXRpbHMuZGVjb2RlX3JhbmdlKHNoZWV0WychcmVmJ10pOwogICAgICB2YXIgQzsKICAgICAgdmFyIFIgPSByYW5nZS5zLnI7CiAgICAgIC8qIHN0YXJ0IGluIHRoZSBmaXJzdCByb3cgKi8KCiAgICAgIGZvciAoQyA9IHJhbmdlLnMuYzsgQyA8PSByYW5nZS5lLmM7ICsrQykgewogICAgICAgIC8qIHdhbGsgZXZlcnkgY29sdW1uIGluIHRoZSByYW5nZSAqLwogICAgICAgIHZhciBjZWxsID0gc2hlZXRbWExTWC51dGlscy5lbmNvZGVfY2VsbCh7CiAgICAgICAgICBjOiBDLAogICAgICAgICAgcjogUgogICAgICAgIH0pXTsKICAgICAgICAvKiBmaW5kIHRoZSBjZWxsIGluIHRoZSBmaXJzdCByb3cgKi8KCiAgICAgICAgdmFyIGhkciA9ICdVTktOT1dOICcgKyBDOyAvLyA8LS0gcmVwbGFjZSB3aXRoIHlvdXIgZGVzaXJlZCBkZWZhdWx0CgogICAgICAgIGlmIChjZWxsICYmIGNlbGwudCkgaGRyID0gWExTWC51dGlscy5mb3JtYXRfY2VsbChjZWxsKTsKICAgICAgICBoZWFkZXJzLnB1c2goaGRyKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGhlYWRlcnM7CiAgICB9LAogICAgaXNFeGNlbDogZnVuY3Rpb24gaXNFeGNlbChmaWxlKSB7CiAgICAgIHJldHVybiAvXC4oeGxzeHx4bHN8Y3N2KSQvLnRlc3QoZmlsZS5uYW1lKTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <input ref=\"excel-upload-input\" class=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n    <div class=\"drop\" @drop=\"handleDrop\" @dragover=\"handleDragover\" @dragenter=\"handleDragover\">\n      Drop excel file here or\n      <el-button :loading=\"loading\" style=\"margin-left:16px;\" size=\"mini\" type=\"primary\" @click=\"handleUpload\">\n        Browse\n      </el-button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport XLSX from 'xlsx'\n\nexport default {\n  props: {\n    beforeUpload: Function, // eslint-disable-line\n    onSuccess: Function// eslint-disable-line\n  },\n  data() {\n    return {\n      loading: false,\n      excelData: {\n        header: null,\n        results: null\n      }\n    }\n  },\n  methods: {\n    generateData({ header, results }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.onSuccess && this.onSuccess(this.excelData)\n    },\n    handleDrop(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      if (this.loading) return\n      const files = e.dataTransfer.files\n      if (files.length !== 1) {\n        this.$message.error('Only support uploading one file!')\n        return\n      }\n      const rawFile = files[0] // only use files[0]\n\n      if (!this.isExcel(rawFile)) {\n        this.$message.error('Only supports upload .xlsx, .xls, .csv suffix files')\n        return false\n      }\n      this.upload(rawFile)\n      e.stopPropagation()\n      e.preventDefault()\n    },\n    handleDragover(e) {\n      e.stopPropagation()\n      e.preventDefault()\n      e.dataTransfer.dropEffect = 'copy'\n    },\n    handleUpload() {\n      this.$refs['excel-upload-input'].click()\n    },\n    handleClick(e) {\n      const files = e.target.files\n      const rawFile = files[0] // only use files[0]\n      if (!rawFile) return\n      this.upload(rawFile)\n    },\n    upload(rawFile) {\n      this.$refs['excel-upload-input'].value = null // fix can't select the same excel\n\n      if (!this.beforeUpload) {\n        this.readerData(rawFile)\n        return\n      }\n      const before = this.beforeUpload(rawFile)\n      if (before) {\n        this.readerData(rawFile)\n      }\n    },\n    readerData(rawFile) {\n      this.loading = true\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          this.generateData({ header, results })\n          this.loading = false\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    getHeaderRow(sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = 'UNKNOWN ' + C // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n    isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.excel-upload-input{\n  display: none;\n  z-index: -9999;\n}\n.drop{\n  border: 2px dashed #bbb;\n  width: 600px;\n  height: 160px;\n  line-height: 160px;\n  margin: 0 auto;\n  font-size: 24px;\n  border-radius: 5px;\n  text-align: center;\n  color: #bbb;\n  position: relative;\n}\n</style>\n"],"sourceRoot":"src/components/UploadExcel"}]}